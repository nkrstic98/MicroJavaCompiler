

package rs.ac.bg.etf.pp1;

import java.util.List;
import java.util.ArrayList;

import java_cup.runtime.*;
import org.apache.log4j.*;
import rs.ac.bg.etf.pp1.ast.*;

import rs.ac.bg.etf.pp1.test.CompilerError;
import rs.ac.bg.etf.pp1.test.CompilerError.CompilerErrorType;

parser code {:
	List<CompilerError> compilerErrors = new ArrayList<CompilerError>();

	boolean errorDetected = false;

	Logger log = Logger.getLogger(getClass());
	
    // slede redefinisani metodi za prijavu gresaka radi izmene teksta poruke
    
    private void reportError(int line, String message) {
		CompilerError ce = new CompilerError(line, message, CompilerErrorType.SYNTAX_ERROR);
		compilerErrors.add(ce);
	}
	
	public List<CompilerError> getErrors() {
		return compilerErrors;
	}
     
    public void report_fatal_error(String message, Object info) throws java.lang.Exception {
      done_parsing();
      report_error(message, info);
    }
  
    public void syntax_error(Symbol cur_token) {
        report_error("Sintaksna greska", cur_token);
    }
  
    public void unrecovered_syntax_error(Symbol cur_token) throws java.lang.Exception {
        report_fatal_error("Fatalna greska, parsiranje se ne moze nastaviti", cur_token);
    }

    public void report_error(String message, Object info) {
    	errorDetected = true;
    	StringBuilder msg = new StringBuilder(message); 
    	if (info instanceof Symbol)
            msg.append (" na liniji ").append(((Symbol)info).left);
        log.error(msg.toString());
        if (info instanceof Symbol) {
        	reportError(((Symbol)info).left, message);
        }
    }
:}

init with {:
	errorDetected = false;
:}

scan with {:
	Symbol s = this.getScanner().next_token();
	if (s != null && s.value != null) 
		log.info(s.toString() + " " + s.value.toString());
	return s;
:}

terminal String IDENT;
terminal Integer NUMBER;
terminal Character CHARCONST;
terminal String BOOLCONST;

terminal PROG;
terminal BREAK, RETURN, CONTINUE;
terminal CONST, VOID;
terminal CLASS, EXTENDS, NEW;
terminal ELSE, IF, SWITCH, CASE, DO, WHILE;
terminal PRINT, READ;
terminal ADD, SUB;
terminal MUL, DIV, MOD;
terminal EQUALITY, NOEQUALITY, GREATER, GREATEREQ, LESS, LESSEQ;
terminal AND, OR;
terminal EQUAL;
terminal INC, DEC;
terminal SEMI, COMMA, DOT;
terminal LPAREN, RPAREN;
terminal LBRACE, RBRACE;
terminal LSQUARE, RSQUARE;
terminal QUESTION, DDOT;
terminal DEFAULT, YIELD, GOTO;


nonterminal rs.etf.pp1.symboltable.concepts.Obj ProgName, Program, MethodDecl, MethodTypeName, Designator, DesignatorArrayName;
nonterminal rs.etf.pp1.symboltable.concepts.Struct Type, MethodType, Factor, Term, Expr1, Expr, DesignatorStatement, CondFact, CondTerm, Condition;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CondFactList, CondTermList, Statement;
nonterminal rs.etf.pp1.symboltable.concepts.Struct CaseList, CaseStmt, SwitchExpr;

nonterminal ParamDecl;
nonterminal ConstDecl, ConstAssign;
nonterminal VarDecl, OptSquare, VarDeclRest;
nonterminal VarDeclList, MethodDeclList;
nonterminal ClassDecl, ClassMethods;
nonterminal OptFormPars;
nonterminal FormPars, FormParamDecl;
nonterminal ElseStmt, PrintExpr, DefaultStmt, YieldStatement, CaseStatements;
nonterminal DesignatorAssignment;
nonterminal DoStmt, IfStmt, StmtList;
nonterminal ActPars, OptionalMinus;
nonterminal ActualPars;
nonterminal Assignop, Relop, Addop, Mulop;
nonterminal Label, ElseTerminal;
nonterminal CaseCase;

precedence left ELSE;


Program ::= (Program) PROG ProgName:p ParamDecl LBRACE MethodDeclList RBRACE;

ParamDecl ::= (ConstParam) ParamDecl ConstDecl
			|
			(VarParam) ParamDecl VarDecl
			|
			/* epsilon */
			;

ProgName ::= (ProgName) IDENT:progName;

ConstDecl ::= (ConstDecl) CONST Type:constType ConstAssign SEMI
			;
			
ConstAssign ::= (SingleNumberConst) IDENT:constName EQUAL NUMBER:constVal
				|
				(MultiNumberConst) ConstAssign COMMA IDENT:constName EQUAL NUMBER:constVal
				|
				(SingleCharConst) IDENT:constName EQUAL CHARCONST:constVal
				|
				(MultiCharConst) ConstAssign COMMA IDENT:constName EQUAL CHARCONST:constVal
				|
				(SingleBoolConst )IDENT:constName EQUAL BOOLCONST:constVal
				|
				(MultiBoolConst) ConstAssign COMMA IDENT:constName EQUAL BOOLCONST:constVal
				;
				
VarDecl ::= (VarDeclaration) Type:varType IDENT:varName VarDeclRest SEMI
			|
			(VarDeclarationArray) Type:varType IDENT:varName LSQUARE RSQUARE VarDeclRest SEMI
			|
			error SEMI:l
			{: parser.report_error("Izvrsen oporavak do ; u liniji ", l);  :}
			|
			error COMMA:l
			{: parser.report_error("Izvrsen oporavak do , u liniji ", l);  :}
			;
			
VarDeclRest ::= (VarDeclMore) VarDeclRest COMMA IDENT:varName
				|
				(VarDeclArrayMore) VarDeclRest COMMA IDENT:varName LSQUARE RSQUARE
				|
				(NoVarDeclMore) /* epsilon */
				;
			
OptSquare ::= (Squares) LSQUARE RSQUARE
				|
				(NoSquares) /* epsilon */
				;

VarDeclList ::= (VarDeclarations) VarDeclList VarDecl
				|
				(NoVarDecl) /* epsilon */
				; 

MethodDeclList ::= (MethodDeclarations) MethodDeclList MethodDecl
					|
					(NoMethodDeclarations) /* epsilon */
					;

MethodDecl ::= (MethodDecl) MethodTypeName LPAREN OptFormPars RPAREN VarDeclList LBRACE StmtList RBRACE;

MethodTypeName ::= (MethodTypeName) MethodType:retType IDENT:methName;

MethodType ::= (MethodRetType) Type:type
				|
				(VoidRetType) VOID:type
				;
				
OptFormPars ::= (OptFormParams) FormPars
				|
				(NoFormPars) /* epsilon */
				;

FormPars ::= (FormParams) FormPars COMMA FormParamDecl
			|
			(NoFormParams) FormParamDecl
			;

FormParamDecl ::= (FormParam) Type:paramType IDENT:paramName	
				|
				(FormParamArray) Type:paramType IDENT:paramName LSQUARE RSQUARE	
				;

Type ::= (Type) IDENT:type;

Statement ::= (DesStmt) DesignatorStatement SEMI
			|
			(MatchedIfElse) IfStmt LPAREN Condition RPAREN Statement ElseStmt
			|
			(DoWhileStmt) DoStmt Statement WHILE LPAREN Condition RPAREN SEMI
			|
			(YieldStmt) YieldStatement Expr SEMI
			|
			(BreakStmt) BREAK SEMI
			|
			(ContinueStmt) CONTINUE SEMI
			|
			(RetStmt) RETURN Expr:retVal SEMI
			|
			(RetNoValStmt) RETURN SEMI
			|
			(ReadStmt) READ LPAREN Designator RPAREN SEMI
			|
			(PrintStmt) PRINT LPAREN Expr RPAREN SEMI
			|
			(PrintStmtwithNumber) PRINT LPAREN Expr COMMA NUMBER RPAREN SEMI
			|
			(BasicStmt) LBRACE StmtList RBRACE
			|
			(GotoStmt) GOTO IDENT:labelname SEMI
			;
			
YieldStatement ::= (YieldStatement) YIELD;
			
DoStmt ::= (DoStmt) DO;

IfStmt ::= (IfStmt) IF;
			
ElseStmt ::= (ElseStatement) ElseTerminal Statement
			|
			(NoElseStatement) /* epsilon */
			;
			
ElseTerminal ::= (ElseTerminal) ELSE;
			
StmtList ::= (MultiStmtList) StmtList Statement
			|
			(MultiStmtListLabel) StmtList Label Statement
			|
			(NoStmt) /* epsilon */
			;
			
Label ::= (Label) IDENT:labelname DDOT;

DesignatorStatement ::= (DesAssign) Designator:varName Assignop Expr:val
						|
						(ProcedureCall) Designator:procName LPAREN ActualPars RPAREN
						|
						(VarInc) Designator:varName INC
						|
						(VarDec) Designator:varName DEC
						|
						error SEMI:l
		   				{: parser.report_error("Izvrsen oporavak do ; u liniji ", l);  :}
						;						

ActPars ::= (MultipleParam) ActPars COMMA Expr:paramName
			|
			(SingleParam) Expr:paramName
			;

Condition ::= (Condition) CondTermList; 

CondTermList ::= (OrCond) CondTermList:cond1 OR CondTerm:cond2
			|
			(SimpleCond) CondTerm:cond
			;

CondTerm ::= (CondTerm) CondFactList;

CondFactList ::= (AndCond) CondFactList:cond1 AND CondFact:cond2
			|
			(SimpleCondTerm) CondFact:cond
			;

CondFact ::= (CondExpr) Expr:expr
			|
			(CompareExpr) Expr:comp1 Relop Expr:comp2
			;

Expr ::= (BasicExpr) OptionalMinus Expr1:expr
		|
		(SwitchExpretion) SwitchExpr LPAREN Expr:chooseVal RPAREN LBRACE CaseStatements RBRACE
		;
		
SwitchExpr ::= (SwitchExpr) SWITCH;
		
CaseStmt ::= (CaseStmt) CaseCase DDOT StmtList;

CaseCase ::= (CaseCase) CASE NUMBER;

CaseList ::= (MultiCaseList) CaseList CaseStmt
			|
			(NoCase) /* epsilon */
			;
			
CaseStatements ::= (CaseStatements) CaseList DefaultStmt DDOT StmtList;
			
DefaultStmt ::= (DefaultStmt) DEFAULT;

Expr1 ::= (AddExpr) Expr1:term Addop Term:t
		|
		(TermExpr)  Term:term
		;

OptionalMinus ::= (Minus) SUB
				|
				(NoMinus) /* epsilon */
				;

Term ::= (MulopTerm) Term:term Mulop Factor:factor
		|
		(FactorTerm) Factor:factor
		;	 

Factor ::= 	(Var) Designator:varName
			|
			(FuncCall) Designator:funcName LPAREN ActualPars RPAREN
			|
			(NumConst) NUMBER:numConst
			|
			(CharConst) CHARCONST:charConst
			|
			(BoolConst) BOOLCONST:boolConst
			|
			(NewOp) NEW Type:varType
			|
			(NewArray) NEW Type:varType LSQUARE Expr:elemNum RSQUARE
			|
			(FactExpr) LPAREN Expr RPAREN
			;
			
ActualPars ::= (Actuals) ActPars
				|
				(NoActuals) /* epsilon */
				;

Designator ::= (DesBasic) IDENT:varName
				|
				(DesArray) DesignatorArrayName LSQUARE Expr:arrayIndex RSQUARE
				;
				
DesignatorArrayName ::= (DesignatorArrayName) IDENT:varName;

Assignop ::= (AssignOperator) EQUAL;

Relop ::= (EqualsOperator) EQUALITY
		|
		(NotEqualsOperator) NOEQUALITY
		|
		(GreaterOperator) GREATER
		|
		(GreaterEqOperator) GREATEREQ
		|
		(LessOperator) LESS
		|
		(LessEqOperator) LESSEQ
		;

Addop ::= (AddOperator) ADD
		|
		(SubOperator) SUB
		;

Mulop ::= (MulOperator) MUL 
		|
		(DivOperator) DIV
		|
		(ModOperator) MOD
		;









